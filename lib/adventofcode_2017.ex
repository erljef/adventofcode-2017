defmodule Adventofcode2017 do
  @moduledoc """
  Documentation for Adventofcode2017.
  """

  def solutions do
    [day1(), day2(), day3(), day4(), day5(), day6(), day7(), day8(), day9(), day10(), day11(), day12(), day13(), day14(), day15(), day16()]
    |> Enum.with_index(1)
    |> Enum.each(fn {{first, second}, day} -> IO.puts(~s"Day #{day}: #{first}, #{second}") end)
  end

  @doc """
  Day 1

  ## Examples

      iex> Adventofcode2017.day1
      {"Captcha 1: 1136", "Captcha 2: 1092"}
  """
  def day1 do
    {
      ~s"Captcha 1: #{
        Day1.solve_captcha(

        )
      }",
      ~s"Captcha 2: #{
        Day1.solve_captcha_2(

        )
      }"
    }
  end

  def day2 do
    {
      ~s"Checksum 1: #{
        Day2.checksum(
          """
          737	1866	1565	1452	1908	1874	232	1928	201	241	922	281	1651	1740	1012	1001
          339	581	41	127	331	133	51	131	129	95	499	527	518	435	508	494
          1014	575	1166	259	152	631	1152	1010	182	943	163	158	1037	1108	1092	887
          56	491	409	1263	1535	41	1431	1207	1393	700	1133	53	131	466	202	62
          632	403	118	352	253	672	711	135	116	665	724	780	159	133	90	100
          1580	85	1786	1613	1479	100	94	1856	546	76	1687	1769	1284	1422	1909	1548
          479	356	122	372	786	1853	979	116	530	123	1751	887	109	1997	160	1960
          446	771	72	728	109	369	300	746	86	910	566	792	616	84	338	57
          6599	2182	200	2097	4146	7155	7018	1815	1173	4695	201	7808	242	3627	222	7266
          1729	600	651	165	1780	2160	626	1215	149	179	1937	1423	156	129	634	458
          1378	121	146	437	1925	2692	130	557	2374	2538	2920	2791	156	317	139	541
          1631	176	1947	259	2014	153	268	752	2255	347	227	2270	2278	544	2379	349
          184	314	178	242	145	410	257	342	183	106	302	320	288	151	449	127
          175	5396	1852	4565	4775	665	4227	171	4887	181	2098	4408	2211	3884	2482	158
          1717	3629	244	258	281	3635	235	4148	3723	4272	3589	4557	4334	4145	3117	4510
          55	258	363	116	319	49	212	44	303	349	327	330	316	297	313	67
          """
        )
      }",
      ~s"Evenly divisable 1: #{
        Day2.evenly_divisable(
          """
          737	1866	1565	1452	1908	1874	232	1928	201	241	922	281	1651	1740	1012	1001
          339	581	41	127	331	133	51	131	129	95	499	527	518	435	508	494
          1014	575	1166	259	152	631	1152	1010	182	943	163	158	1037	1108	1092	887
          56	491	409	1263	1535	41	1431	1207	1393	700	1133	53	131	466	202	62
          632	403	118	352	253	672	711	135	116	665	724	780	159	133	90	100
          1580	85	1786	1613	1479	100	94	1856	546	76	1687	1769	1284	1422	1909	1548
          479	356	122	372	786	1853	979	116	530	123	1751	887	109	1997	160	1960
          446	771	72	728	109	369	300	746	86	910	566	792	616	84	338	57
          6599	2182	200	2097	4146	7155	7018	1815	1173	4695	201	7808	242	3627	222	7266
          1729	600	651	165	1780	2160	626	1215	149	179	1937	1423	156	129	634	458
          1378	121	146	437	1925	2692	130	557	2374	2538	2920	2791	156	317	139	541
          1631	176	1947	259	2014	153	268	752	2255	347	227	2270	2278	544	2379	349
          184	314	178	242	145	410	257	342	183	106	302	320	288	151	449	127
          175	5396	1852	4565	4775	665	4227	171	4887	181	2098	4408	2211	3884	2482	158
          1717	3629	244	258	281	3635	235	4148	3723	4272	3589	4557	4334	4145	3117	4510
          55	258	363	116	319	49	212	44	303	349	327	330	316	297	313	67
          """
        )
      }"
    }
  end

  def day3 do
    value = Day3.spiral_values
            |> Stream.drop_while(fn x -> x <= 368078 end)
            |> Stream.take(1)
            |> Enum.to_list
            |> hd
    {~s"Distance 1: #{Day3.distance(368078)}", ~s"Value after 368078: #{value}"}
  end

  def day4 do
    {
      ~s"Valid without duplicate: #{Day4.validate_file("day4_input.txt", &Day4.validate_no_duplicates/1)}",
      ~s"Valid without anagrams: #{Day4.validate_file("day4_input.txt", &Day4.validate_no_anagrams/1)}"
    }
  end

  def day5 do
    input = Day5.read_file("day5_input.txt")
    {
      ~s"Steps: #{Day5.traverse(input)}",
      ""
    }
  end

  def day6 do
    input = Day6.read_file("day6_input.txt")
    {
      ~s"Redistributions: #{Day6.redistributions(input)}",
      ~s"Cycles: #{Day6.cycles(input)}"
    }
  end

  def day7 do
    input = Day7.read_file("day7_input.txt")
    root = Day7.find_root(input)[:name]
    correct_weight = Day7.find_unbalanced(input)
    {
      ~s"Parent: #{root}",
      ~s"Weight: #{correct_weight}"
    }
  end

  def day8 do
    input = Day8.read_file("day8_input.txt")
    registers = Day8.process(input)
    {
      ~s"Max: #{registers |> Day8.max_value}",
      ~s"Highest: #{registers |> Day8.highest_value}"
    }
  end

  def day9 do
    input = Day9.read_file("day9_input.txt")
    {
      ~s"Score: #{Day9.score(input)}",
      ~s"Garbage: #{Day9.garbage(input)}"
    }
  end

  def day10 do
    input = 0..255 |> Enum.to_list
    lengths = Day10.read_file("day10_input.txt")
    {
      ~s"Hash: #{Day10.hash(input, Day10.to_integers(lengths))}",
      ~s"Knot Hash: #{Day10.knot_hash(lengths)}"
    }
  end

  def day11 do
    input = Day11.read_file("day11_input.txt") |> Day11.to_directions
    {
      ~s"Steps to destination: #{Day11.steps(input)}",
      ~s"Steps to furthest point: #{Day11.furthest(input)}"
    }
  end

  def day12 do
    input = Day12.read_file("day12_input.txt")
    {
      ~s"Groups connected to 0: #{Day12.contains_group(input, 0)}",
      ~s"Total groups: #{Day12.total_groups(input)}"
    }
  end

  def day13 do
    input = Day13.read_file("day13_input.txt")
    {
      ~s"Severity: #{Day13.severity(input)}",
      ~s"Minimum delay: #{Day13.delay(input)}"
    }
  end

  def day14 do
    grid = Day14.grid("xlqgujun")
    coordinates = grid |> Day14.coordinates
    {
      ~s"Used squares: #{Day14.used_squares(grid)}",
      ~s"Regions: #{Day14.regions(coordinates)}"
    }
  end

  def day15 do
    {
      ~s"Pairs: #{Day15.count_pairs(703, 516)}",
      ~s"Pairs 2: #{Day15.count_pairs_multiples(703, 516)}"
    }
  end

  def day16 do
    list = "abcdefghijklmnop" |> String.graphemes
    instructions = Day16.read_file("day16_input.txt") |> Day16.to_instructions
    {
      ~s"Order: #{Day16.process_instructions(list, instructions) |> Enum.join}",
      ~s"Order 2: #{Day16.process_instructions(list, instructions, 1000000000) |> elem(0) |> Enum.join}"
    }
  end
end
